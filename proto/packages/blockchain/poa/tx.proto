syntax = "proto3";
package packages.blockchain.poa;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "google/protobuf/any.proto";
import "amino/amino.proto";

option go_package = "github.com/Peersyst/exrp/v2/x/poa/types";

// Msg defines the Msg service.
service Msg {
  rpc AddValidator           (MsgAddValidator) returns (MsgAddValidatorResponse);
  rpc RemoveValidator        (MsgRemoveValidator) returns (MsgRemoveValidatorResponse);
}

message MsgAddValidator {
  option (cosmos.msg.v1.signer) = "authority";
  option (cosmos.msg.v1.signer) = "validator_address";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.staking.v1beta1.Description description = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  google.protobuf.Any pubkey = 4 [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
}

message MsgAddValidatorResponse {}

message MsgRemoveValidator {
  option (cosmos.msg.v1.signer) = "authority";
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgRemoveValidatorResponse {}



